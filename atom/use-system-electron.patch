--- a/package.json
+++ b/package.json
@@ -12,7 +12,6 @@
     "url": "https://github.com/atom/atom/issues"
   },
   "license": "MIT",
-  "electronVersion": "1.3.15",
   "dependencies": {
     "async": "0.2.6",
     "atom-keymap": "8.1.2",
--- a/script/build
+++ b/script/build
@@ -2,10 +2,6 @@
 
 'use strict'
 
-// Run bootstrap first to ensure all the dependencies used later in this script
-// are installed.
-require('./bootstrap')
-
 // Needed so we can require src/module-cache.coffee during generateModuleCache
 require('coffee-script/register')
 require('colors')
@@ -24,7 +20,6 @@
   .wrap(yargs.terminalWidth())
   .argv
 
-const checkChromedriverVersion = require('./lib/check-chromedriver-version')
 const cleanOutputDirectory = require('./lib/clean-output-directory')
 const codeSignOnMac = require('./lib/code-sign-on-mac')
 const codeSignOnWindows = require('./lib/code-sign-on-windows')
@@ -37,7 +32,6 @@
 const generateAPIDocs = require('./lib/generate-api-docs')
 const generateMetadata = require('./lib/generate-metadata')
 const generateModuleCache = require('./lib/generate-module-cache')
-const generateStartupSnapshot = require('./lib/generate-startup-snapshot')
 const installApplication = require('./lib/install-application')
 const packageApplication = require('./lib/package-application')
 const prebuildLessCache = require('./lib/prebuild-less-cache')
@@ -52,7 +46,6 @@
   process.exit(1)
 })
 
-checkChromedriverVersion()
 cleanOutputDirectory()
 copyAssets()
 transpilePackagesWithCustomTranspilerPaths()
@@ -65,52 +58,3 @@
 generateMetadata()
 generateAPIDocs()
 dumpSymbols()
-  .then(packageApplication)
-  .then(packagedAppPath => generateStartupSnapshot(packagedAppPath).then(() => packagedAppPath))
-  .then(packagedAppPath => {
-    if (process.platform === 'darwin') {
-      if (argv.codeSign) {
-        codeSignOnMac(packagedAppPath)
-      } else {
-        console.log('Skipping code-signing. Specify the --code-sign option to perform code-signing'.gray)
-      }
-    } else if (process.platform === 'win32') {
-      if (argv.createWindowsInstaller) {
-        return createWindowsInstaller(packagedAppPath, argv.codeSign).then(() => packagedAppPath)
-      }
-      else {
-        console.log('Skipping creating installer. Specify the --create-windows-installer option to create a Squirrel-based Windows installer.'.gray)
-        if (argv.codeSign) {
-          codeSignOnWindows(packagedAppPath)
-        } else {
-          console.log('Skipping code-signing. Specify the --code-sign option to perform code-signing'.gray)
-        }
-      }
-    } else if (process.platform === 'linux') {
-      if (argv.createDebianPackage) {
-        createDebianPackage(packagedAppPath)
-      } else {
-        console.log('Skipping creating debian package. Specify the --create-debian-package option to create it.'.gray)
-      }
-
-      if (argv.createRpmPackage) {
-        createRpmPackage(packagedAppPath)
-      } else {
-        console.log('Skipping creating rpm package. Specify the --create-rpm-package option to create it.'.gray)
-      }
-    }
-
-    return Promise.resolve(packagedAppPath)
-  }).then(packagedAppPath => {
-    if (argv.compressArtifacts) {
-      compressArtifacts(packagedAppPath)
-    } else {
-      console.log('Skipping artifacts compression. Specify the --compress-artifacts option to compress Atom binaries (and symbols on macOS)'.gray)
-    }
-
-    if (argv.install != null) {
-      installApplication(packagedAppPath, argv.install)
-    } else {
-      console.log('Skipping installation. Specify the --install option to install Atom'.gray)
-    }
-  })
--- a/script/package.json
+++ b/script/package.json
@@ -8,9 +8,6 @@
     "colors": "1.1.2",
     "csslint": "1.0.2",
     "donna": "1.0.13",
-    "electron-chromedriver": "~1.3",
-    "electron-link": "0.1.0",
-    "electron-mksnapshot": "~1.3",
     "electron-packager": "7.3.0",
     "electron-winstaller": "2.5.1",
     "fs-extra": "0.30.0",
--- a/src/module-cache.coffee
+++ b/src/module-cache.coffee
@@ -195,7 +195,7 @@
   return
 
 registerBuiltins = (devMode) ->
-  if devMode or not cache.resourcePath.startsWith("#{process.resourcesPath}#{path.sep}")
+  if devMode or not cache.resourcePath.startsWith("/usr/lib/atom")
     fs = require 'fs-plus'
     atomJsPath = path.join(cache.resourcePath, 'exports', 'atom.js')
     cache.builtins.atom = atomJsPath if fs.isFileSync(atomJsPath)
--- a/src/package-manager.coffee
+++ b/src/package-manager.coffee
@@ -610,7 +610,7 @@
 
   isBundledPackagePath: (packagePath) ->
     if @devMode
-      return false unless @resourcePath.startsWith("#{process.resourcesPath}#{path.sep}")
+      return false unless @resourcePath.startsWith("/usr/lib/atom")
 
     @resourcePathWithTrailingSlash ?= "#{@resourcePath}#{path.sep}"
     packagePath?.startsWith(@resourcePathWithTrailingSlash)
--- a/static/index.js
+++ b/static/index.js
@@ -23,7 +23,7 @@
       process.resourcesPath = path.normalize(process.resourcesPath)
 
       setupAtomHome()
-      const devMode = getWindowLoadSettings().devMode || !getWindowLoadSettings().resourcePath.startsWith(process.resourcesPath + path.sep)
+      const devMode = getWindowLoadSettings().devMode || !getWindowLoadSettings().resourcePath.startsWith('/usr/lib/atom')
       useSnapshot = !devMode && typeof snapshotResult !== 'undefined'
 
       if (devMode) {
