# $Id$
# Maintainer: Nicola Squartini <tensor5@gmail.com>

_chromiumver=58.0.3029.110
pkgname=electron
pkgver=1.7.12
pkgrel=2
pkgdesc='Build cross platform desktop apps with web technologies'
arch=('x86_64')
url='http://electron.atom.io/'
license=('MIT' 'custom')
depends=('c-ares' 'ffmpeg' 'gtk3' 'http-parser' 'libevent' 'libxslt'
         'libxss' 'minizip' 'nss' 're2' 'snappy')
makedepends=('clang' 'gconf' 'git' 'gperf' 'gtk2' 'harfbuzz-icu' 'jsoncpp'
             'libexif' 'libgnome-keyring' 'libnotify' 'ninja' 'npm' 'pciutils'
             'python2' 'wget' 'yasm')
optdepends=('gvfs: file deletion support (gvfs-trash)'
            'kde-cli-tools: file deletion support (kioclient5)'
            'kdebase-runtime: file deletion support (kioclient)'
            'trash-cli: file deletion support (trash-put)')
source=("git+https://github.com/electron/electron.git#tag=v${pkgver}"
        'git+https://github.com/boto/boto.git'
        'breakpad::git+https://github.com/electron/chromium-breakpad.git'
        'git+https://chromium.googlesource.com/chromium/src/tools/grit.git'
        'git+https://github.com/electron/gyp.git'
        "git+https://github.com/electron/libchromiumcontent.git"
        'native_mate::git+https://github.com/electron/native-mate.git'
        'git+https://github.com/electron/node.git'
        'pdf_viewer::git+https://github.com/electron/pdf-viewer.git'
        'git+https://github.com/kennethreitz/requests.git'
        'google-breakpad::git+https://chromium.googlesource.com/breakpad/breakpad/src'
        "electron-chromium-${_chromiumver}.tar.xz::https://github.com/zcbenz/chromium-source-tarball/releases/download/${_chromiumver}/chromium-${_chromiumver}.tar.xz"
        'electron.desktop'
        'default_app-icon.patch'
        'dont-bootstrap-libchromiumcontent.patch'
        'dont-update-submodules.patch'
        'dont-use-sysroot.patch'
        'gtk3-menu-bar.patch'
        'gtk3-message-box.patch'
        'gtk3-warnings.patch'
        'no-whole-archive.patch'
        'use-system-libraries-in-node.patch'
        'use-system-ninja.patch'
        'use-system-ffmpeg.patch'
        'breakpad-glibc2.26.patch'
        'gyp-no-rpath.patch'
        'libchromiumcontent-chdir.patch'
        'libchromiumcontent-no-depot_tools.patch'
        'libchromiumcontent-settings.patch'
        'libchromiumcontent-sort-filenames.patch'
        'libchromiumcontent-static-library-only.patch'
        'libchromiumcontent-use-system-tools.patch'
        'chromium-gn-bootstrap-r2.patch'
        'chromium-gtk3.patch'
        'chromium-include-functional.patch'
        'chromium-use-system-ffmpeg.patch'
        'chromium-use-system-minizip.patch'
        'chromium-use-system-re2.patch'
       )
noextract=("electron-chromium-${_chromiumver}.tar.xz")
sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'efe0c61a8888ead17d4ae2494623b65b4a201e6c8487b8af850c17b4cc7cccadd10b85a2ba4a913622bacbff5bb3bfbe192e361fc1a0e3c00c4a5cd2195666c6'
            '613317b8c63efb0ddfe9112b56aa9714b536082144c0903d5b97351c3396b3c9eedeb44b6da72b85cbfd1bdd16cba30c512ac93c8ca6ffb04cad283ef29958b2'
            'a9b4d25987171c170ad2c6467c45d1f27c6dfba71c4d981564f6d0a683acd54c17e415314c35a44560ab6428a2ff98321caec0d2a07a9c69bddd580c42f6eb48'
            'c2ae7549e6372609fbebaf552af2ebda9e313eec4c3a8636ba9dfe7d34bbc5fdc7c73a88881a3a7a80b04b929b8251fe24cd3bfed828a812cdcfb0efc29312f5'
            '22d2d3605a49a72cf7e12e4f1cdadb6e327a7487eed47eeb04a4213cf6dcc73c47d93cdea85a767a11181debc37e952f5e4685f9fae1debd4a1a1a10ac188e8c'
            '145c9b96c867bbaff76639554e63315186103e16bde366629a56cf06d19015141d84711923e57bfaeffb3f2ab91c986c75c41767f4bf05c179e07b68e2cb554c'
            '62963c4dbf86624f370aad1ee42d43b7e4f6a0f719d906959ed642b1c0ca9ba397a8ea3923e6c6a4acc38bfb2187642791148dd528bb3b4ddc79f039fa6d8fa5'
            '4eeb3a757bcf268b9bc7d16ca1efa9fa96d1aa55827766e1ec88d967946412688f4ab88a0ee3fb0870f32fa6ce4dd5cfe92c27a55c86d489e04c5c297d30e6bc'
            'd6dfadb1c30e0a2f234dedd09a79c4af96aaef976146fdb95989edc6bd019d6e52e127fc9fc119c17e4d3321052f49877c728c52cd2e8d3ca41165c5155b40d3'
            '42fce1906cc78f3b853ec1bad2ef9f6ec3465c92d941113d3f084406c0dfcbe0a4eddf9fbe7d0decb63d1cfbb4bbf681bbb75510df1c874afb1d9b1805c228a4'
            '606b44f4c259cb1acc7f825aefc072a951004d0f5307ddf95d87634b83e25bfe1202d3aef0c1cef47b51a6afa58c2a365a405c524adf1af5e799e69b97bb368b'
            '473db4f20714e12bf402b61b67f1fff886be4505cdec77120c143c453e0529028703c8b3b3cb8a69d68debd35dfce528db4b3a3028162ea43ba600c9364cbaa5'
            '49da48a340bc165a7677bb324b091240e1f8f6acf868b67df05f1cd9d3d15a3948a186981ed45e7388ecff4fe5099d3a0ed1ef405af79292505c8e2a301fcc27'
            '61d60c46cfd0b59d4188452f73868363bb051804c8927a75680e150818c7bee7823c3ae6788d1eb4c4d6f672dd92ec684f9f8115d9cf80603e714bf97b08e874'
            'fef435fcae0fcfc5ed7fe66bcdad24565a87493ff133422fa54756ee1c1335d4bfdae7e782d3f72fcd5c0e6c337b7a30fe7fb36a02a3fea1a1d509244d01d636'
            'c8d0711818d790a4db06163b6f22badbad405aa719f7ffe0f2574f2a49074085949902cd060ff47609fc930cc88d60a25a9ca2cc569702fab4ab4a8a57611a4b'
            '607681ea5a5d62201f37e72b039a370c8b260a4eff14697713124b91383315fdde14ebb028e13ca06da26259f322680f2749fc67b99f1bc6196fa3c1c63f5d65'
            '93a85e826f019b0d3af7d8e9276404d2cbaabd9674c6a36a31518e893ac2759cadd410c9c27af1186ad90fe6bd888546df9567987a04375993c6f776bd508b32'
            '2a8a7d781a65d9188af0a10665f499aa4cb1c151c626ef8173a9e4e53159173d3943c2fdc806f88730171b285cccd4efe232ca9d32870a10f7cbe485ede0bcf9'
            'dd7f6fc0023e867835fe7cabd4b54750ebec0ea91102ca11d73a9c3e7caa92f2c8118795d2f67b3269381a3366b3ff9cf692924bcbb379a5ed7ce36b86b4d8b6'
            '6bc66e6d3df8ef3d616a01fa5ac9270eeed1f705cbb3557dc3d670f9cbd50cf47d4773a334e11494cbb78f850ce2c3f364d8889e7bcfcadec299b354a37cfd6a'
            '8ae7a0c049429191a5092b73ba7e6681ac17b0fe4ac77715e67c9e7c1db63e66731912fb144955108ee1d37848d3bb03d1f5defec2b7b2324784dec1eda898ef'
            'c94a8dcb69e2a1d7e2e24a34e89cece2c2329df5a99f214a511bea0e837d44c690de26b72095153d2284c0617b5d89ea782cf54fa3151da9d5c9261ac9469bcd'
            '6a995c3fa315692525db59abbd9e4297551448cb111ba93efc2d6443546cf0961a84fb3762cf9c9be6e56cde13c885504c0dad0968f92bb32e471adfc5cbbf4a'
            'cb903a6dd635fe70afc7c6961700d2aaa1da6ec2996c4f352e253876b8b831cdfe3cc5d32d90aec468302e4b5cabae0efbc269acd4fa3c7ffc26825e8617fa40'
            'eace29bd99f7167ac2e5b7499560ec7e6c205eeee8fd0adef8cc7de3cef5058f9852dd2cc20946d637ed479d25b270c35d52de6f104f41000faa36dc018f63aa'
            '5552e8918462f6c3a4e1baef3c22b57d70c732766945ea0b39f63df7d7b8fca9646f1f9b28b0528fa586799842c949298fc97e1041875da0ca1aacff046f6c9b')

_system_libs=('ffmpeg'
              'flac'
              'harfbuzz-ng'
#              'icu'
              'libevent'
              'libjpeg'
              'libpng'
#              'libvpx'
              'libwebp'
              'libxml'
              'libxslt'
              're2'
              'snappy'
              'yasm'
              'zlib'
             )

prepare() {
  cd "${srcdir}"/electron

  patch -Np1 -i "${srcdir}"/default_app-icon.patch  # Icon from .desktop file
  patch -Np1 -i "${srcdir}"/gtk3-menu-bar.patch
  patch -Np1 -i "${srcdir}"/gtk3-message-box.patch
  patch -Np1 -i "${srcdir}"/gtk3-warnings.patch
  patch -Np1 -i "${srcdir}"/use-system-libraries-in-node.patch
  patch -Np1 -i "${srcdir}"/use-system-ninja.patch
  patch -Np1 -i "${srcdir}"/use-system-ffmpeg.patch
  patch -Np1 -i "${srcdir}"/dont-update-submodules.patch
  patch -Np1 -i "${srcdir}"/dont-use-sysroot.patch
  patch -Np1 -i "${srcdir}"/dont-bootstrap-libchromiumcontent.patch
  patch -Np1 -i "${srcdir}"/no-whole-archive.patch

  # Add extra libraries for unbundling
  sed -e "s/'-lexpat',/'-lexpat', '<\!@(pkg-config --libs-only-l libavcodec libavformat libavutil libevent flac harfbuzz-icu jsoncpp minizip libpng libpulse libwebpdemux libxml-2.0 libxslt)', '-ljpeg', '-lre2', '-lsnappy', '-latomic',/" \
      -e 's/gtk+-2\.0/gtk+-3.0/' \
      -i brightray/brightray.gyp

  mkdir -p "${srcdir}"/python2-path
  ln -sf /usr/bin/python2 "${srcdir}/python2-path/python"

  for m in boto breakpad gyp libchromiumcontent native_mate node pdf_viewer requests; do
    git submodule init vendor/${m}
    git config submodule.vendor/${m}.url "${srcdir}/${m}"
  done
  git submodule update

  cd "${srcdir}"/electron/vendor/pdf_viewer
  git submodule init vendor/grit
  git config submodule.vendor/grit.url "${srcdir}/grit"
  git submodule update

  cd "${srcdir}"/electron/vendor/breakpad
  git submodule init src
  git config submodule.src.url "${srcdir}"/google-breakpad
  git submodule update
  patch -Np1 -i "${srcdir}"/breakpad-glibc2.26.patch

  cd "${srcdir}"/electron/vendor/gyp
  # Remove a useless $ORIGIN/lib/ rpath from the electron binary
  patch -Np1 -i "${srcdir}"/gyp-no-rpath.patch

  cd "${srcdir}"/electron/vendor/libchromiumcontent
  patch -Np1 -i "${srcdir}"/libchromiumcontent-chdir.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-no-depot_tools.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-settings.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-sort-filenames.patch  # deterministic build
  patch -Np1 -i "${srcdir}"/libchromiumcontent-use-system-tools.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-static-library-only.patch
  rm patches/third_party/ffmpeg/build_gn.patch  # Use system ffmpeg
  echo 'Extracting chromium source...'
  tar -xJf "${srcdir}"/electron-chromium-${_chromiumver}.tar.xz
  mv chromium-${_chromiumver} src
  cd src
  patch -Np1 -i "${srcdir}"/chromium-gn-bootstrap-r2.patch
  patch -Np1 -i "${srcdir}"/chromium-gtk3.patch
  patch -Np1 -i "${srcdir}"/chromium-include-functional.patch
  patch -Np1 -i "${srcdir}"/chromium-use-system-ffmpeg.patch
  patch -Np1 -i "${srcdir}"/chromium-use-system-minizip.patch
  patch -Np1 -i "${srcdir}"/chromium-use-system-re2.patch

  for lib in "${_system_libs[@]}" libjpeg_turbo; do
      find -type f -path "*third_party/${lib}/*" \
          \! -path "*third_party/${lib}/chromium/*" \
          \! -path "*third_party/${lib}/google/*" \
          \! -path "*base/third_party/icu/*" \
          \! -path "*base/third_party/libevent/*" \
          \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
          -delete
  done
  python2 build/linux/unbundle/replace_gn_files.py --system-libraries "${_system_libs[@]}"

  # Create sysmlink to system Node.js
  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin
  cd third_party/node
  npm install
  patch -d node_modules/vulcanize -p1 < patch_vulcanize.diff
}

build() {
  export PATH="${srcdir}/python2-path:${PATH}"

  # Build GN
  cd "${srcdir}/electron/vendor/libchromiumcontent/src"
  gn_flags=(
    'clang_base_path="/usr"'
    'clang_use_chrome_plugins=false'
    'treat_warnings_as_errors=false'
    'use_sysroot=false'
  )
  python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${gn_flags[*]}"
  # libevent not needed anymore
  find -type f -path "*base/third_party/libevent/*" \
    \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
    -delete

  cd "${srcdir}"/electron
  LDFLAGS="${LDFLAGS} -Wl,-z,noexecstack"
  script/bootstrap.py --verbose \
                      --clang_dir=/usr \
                      --build_libchromiumcontent
  script/build.py -c Release
}

package() {
  cd "${srcdir}"/electron

  _cc="${srcdir}"/electron/vendor/libchromiumcontent/dist/main

  install -d -m755 "${pkgdir}"/usr/share/licenses/electron
  install -m644 LICENSE "${_cc}"/LICENSES.chromium.html \
          "${pkgdir}"/usr/share/licenses/electron
  for lib in native_mate node; do
    install -m644 vendor/${lib}/LICENSE \
            "${pkgdir}"/usr/share/licenses/electron/LICENSE-${lib}
  done
  install -m644 vendor/libchromiumcontent/src/LICENSE \
          "${pkgdir}"/usr/share/licenses/electron/LICENSE-chromium

  cd out/R
  install -d -m755 "${pkgdir}"/usr/lib/electron
  install -m644 blink_image_resources_200_percent.pak \
          content_resources_200_percent.pak content_shell.pak icudtl.dat \
          natives_blob.bin \
          pdf_viewer_resources.pak \
          snapshot_blob.bin \
          ui_resources_200_percent.pak \
          views_resources_200_percent.pak \
          "${pkgdir}"/usr/lib/electron
  install -m755 electron "${pkgdir}"/usr/lib/electron
  install -dm755 "${pkgdir}"/usr/bin
  ln -s ../lib/electron/electron "${pkgdir}"/usr/bin
  # namcap warning: Referenced library 'libnode.so' is an uninstalled dependency
  # Fixable by moving libnode.so to /usr/lib
  install -m644 libnode.so "${pkgdir}"/usr/lib/electron
  cp -r locales resources "${pkgdir}"/usr/lib/electron
  cd ../..

  echo -n "v${pkgver}" > "${pkgdir}"/usr/lib/electron/version

  # Install .desktop and icon file
  install -Dm644 "${srcdir}"/electron.desktop \
          "${pkgdir}"/usr/share/applications/electron.desktop
  install -Dm644 default_app/icon.png \
          "${pkgdir}"/usr/share/pixmaps/electron.png  # hicolor has no 1024x1024

  # Install Node headers
  _headers_dest="${pkgdir}/usr/lib/electron/node"
  install -d -m755 "${_headers_dest}"
  cd "${srcdir}"/electron/vendor/node
  find src deps/http_parser deps/zlib deps/uv deps/npm \
    -name "*.gypi" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \; \
    -or -name "*.h" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \;
  install -m644 {common,config}.gypi "${_headers_dest}"
  cd "${_cc}"/src
  find v8 -name "*.h" \
    -exec install -D -m644 '{}' "${_headers_dest}/deps/{}" \;
  # echo '9' > "${_headers_dest}/installVersion"
}
