# $Id$
# Maintainer: Nicola Squartini <tensor5@gmail.com>

_chromiumver=59.0.3071.115
_freetype_rev=5a3490e054bda8a318ebde482
pkgname=electron
pkgver=1.8.4
pkgrel=1
pkgdesc='Build cross platform desktop apps with web technologies'
arch=('x86_64')
url='http://electron.atom.io/'
license=('MIT' 'custom')
depends=('c-ares' 'ffmpeg' 'gtk3' 'http-parser' 'libevent' 'libxss' 'minizip'
         'nss' 're2' 'snappy')
makedepends=('clang' 'gconf' 'git' 'gperf' 'gtk2' 'harfbuzz-icu' 'jsoncpp'
             'libexif' 'libgnome-keyring' 'libnotify' 'llvm' 'ninja' 'npm'
             'pciutils' 'python2' 'wget' 'yasm')
optdepends=('gvfs: file deletion support (gvfs-trash)'
            'kde-cli-tools: file deletion support (kioclient5)'
            'kdebase-runtime: file deletion support (kioclient)'
            'trash-cli: file deletion support (trash-put)'
            "xdg-utils: open URLs with desktop's default (xdg-email, xdg-open)")
source=("git+https://github.com/electron/electron.git#tag=v${pkgver}"
        'git+https://github.com/boto/boto.git'
        'breakpad::git+https://github.com/electron/chromium-breakpad.git'
        'git+https://chromium.googlesource.com/chromium/src/tools/grit.git'
        'git+https://github.com/electron/gyp.git'
        "git+https://github.com/electron/libchromiumcontent.git"
        'native_mate::git+https://github.com/electron/native-mate.git'
        'git+https://github.com/electron/node.git'
        'pdf_viewer::git+https://github.com/electron/pdf-viewer.git'
        'git+https://github.com/kennethreitz/requests.git'
        'google-breakpad::git+https://chromium.googlesource.com/breakpad/breakpad/src'
        "chromium-freetype2::git+https://chromium.googlesource.com/chromium/src/third_party/freetype2#commit=${_freetype_rev}"
        "https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${_chromiumver}.tar.xz"
        'electron.desktop'
        'default_app-icon.patch'
        'dont-bootstrap-libchromiumcontent.patch'
        'dont-update-submodules.patch'
        'dont-use-sysroot.patch'
        'gtk3-menu-bar.patch'
        'gtk3-message-box.patch'
        'gtk3-warnings.patch'
        'no-whole-archive.patch'
        'use-system-libraries-in-node.patch'
        'use-system-ninja.patch'
        'use-system-ffmpeg.patch'
        'breakpad-glibc2.26.patch'
        'gyp-no-rpath.patch'
        'libchromiumcontent-no-depot_tools.patch'
        'libchromiumcontent-settings.patch'
        'libchromiumcontent-sort-filenames.patch'
        'libchromiumcontent-static-library-only.patch'
        'libchromiumcontent-use-system-tools.patch'
        'chromium-dmabuf.patch'
        'chromium-include-functional.patch'
        'chromium-use-system-ffmpeg.patch'
        'chromium-use-system-minizip.patch'
        'chromium-use-system-re2.patch'
       )
noextract=("chromium-${_chromiumver}.tar.xz")
sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'f30d54dedd43ba11321db1bcd443bb44a550ffca24ebb579727b98a15b6a3f6f598f20f0ef0889eab6820e6faacba0aa567927fd36d5ed0e61d7bd4f760e9993'
            '613317b8c63efb0ddfe9112b56aa9714b536082144c0903d5b97351c3396b3c9eedeb44b6da72b85cbfd1bdd16cba30c512ac93c8ca6ffb04cad283ef29958b2'
            'a9b4d25987171c170ad2c6467c45d1f27c6dfba71c4d981564f6d0a683acd54c17e415314c35a44560ab6428a2ff98321caec0d2a07a9c69bddd580c42f6eb48'
            'b002bb96d38875876d09ad5ceb76843b306031c470ba24aace6cbc5b8a22774f44b5c0e4a99bf807737e25f57254d14865934694114a9f4551453cc6c560063a'
            '22d2d3605a49a72cf7e12e4f1cdadb6e327a7487eed47eeb04a4213cf6dcc73c47d93cdea85a767a11181debc37e952f5e4685f9fae1debd4a1a1a10ac188e8c'
            '8661ceff63a7b0140e811d699bb5e37ac9ceeb2def9dc47166c54ab6c225157efdac7226d9a305d2bf50e38c53f2a51a15dcdc25e9e2be86002693ada9d32c9d'
            '62963c4dbf86624f370aad1ee42d43b7e4f6a0f719d906959ed642b1c0ca9ba397a8ea3923e6c6a4acc38bfb2187642791148dd528bb3b4ddc79f039fa6d8fa5'
            '4eeb3a757bcf268b9bc7d16ca1efa9fa96d1aa55827766e1ec88d967946412688f4ab88a0ee3fb0870f32fa6ce4dd5cfe92c27a55c86d489e04c5c297d30e6bc'
            'd6dfadb1c30e0a2f234dedd09a79c4af96aaef976146fdb95989edc6bd019d6e52e127fc9fc119c17e4d3321052f49877c728c52cd2e8d3ca41165c5155b40d3'
            'e5a21eea33f24e82b250ad903ae9f6f40a71876661391b7bb2b749edb3470e1256ecb06aba0541f4da4cbaf9be2df90eb2b9e588566138fdb63d92a9aca60936'
            'b1cc501a1d7b2db1c7bd7543e1084a32a7b11e6f2e9c364beefd1a1f0cddb982ea105636ba19226765de44c641afd933d98a2f0ef88674453f5246568858c0cf'
            'b4a42f274b88f9f97fa409a6c95b0f9896bc86aa342ee24cfc029e4f640c5badf258932eabd1d451571339cc8733796f5770e0b979b7deda5b5ae09deb2e85c8'
            'd7df784c7ef366dad6d016643f848490177cb77eaa62c7f895898f11310ec766d6e31a34e756670a1ab300f984dc46dfd31ac23e2cae70860dfb1269ea9fab6b'
            '2dd594a07f8ce62a7706a0365d764ab3ee3cc2d050d6ae4460db3152269e84f43516438a4f48f47fc54fe758a70c462baed6b7defa8b2bd277e67cb1bae8da12'
            'fef435fcae0fcfc5ed7fe66bcdad24565a87493ff133422fa54756ee1c1335d4bfdae7e782d3f72fcd5c0e6c337b7a30fe7fb36a02a3fea1a1d509244d01d636'
            '03676f682cd2db47aaf53c7e8221c3d19e20d7768e9b6a7cdb2da80674f220c293164ee1ca094b0c494d82cf1ba0e178ed66f41a6af28d266a50a758f95d6185'
            'f215ed2ddf9410bd31ada3c220de3f9a725c214532e7220ef2542d60b8a30f0cae21edc3dd7e01fdfa7b3aa877023ab446a76b47bc5fff19ec0bb0fa40df730e'
            '8da75b16f3fc39e828b94fe9bf013a2fd180a81a9a34a8511a99e62e8d2a714ced24d94ef643561e0c88c27868d8eaa643e19003cbfa293451fc15dd75f5801f'
            '9bd56c6dba41ae08cad2435f229bcab7218f82be4a33dbf8dbf7204d839fbf0ba505b8444d3d17083d3260b597e694ead720c5aef9060a21917c3c844ba4ef28'
            '25e5d1051a11ef3158314b06dcb880fbed93d04a793a2c242fb8f01e867620549924b26abcac657f6edec9b9e3a78f198171a528d2567189df75e0a27f12925a'
            'acf6a43e89a49fb5d21fa165fe3a6b6a73b766fec05f952d11f48840ccb7c6640c1f946d87fb9b700f330a4eeffbd05346cc97def3de892b700439cad2a8e7bd'
            '09a910f14c4466a74638af0505dbdbbf586813b0a20506ac15ae375037a1f06f82fea4045350f1e54357dd41fb721061c7cc2f0eea2e3a0439a79466db3875ea'
            '39309580c96220ae503ecd811e1f4c593fea028804d3ba4026a83c0928b941a0ca851b6d76ee289ee48671eb0bd2187c81f26495c6ca92ce6a96baf3c9464274'
            'eace29bd99f7167ac2e5b7499560ec7e6c205eeee8fd0adef8cc7de3cef5058f9852dd2cc20946d637ed479d25b270c35d52de6f104f41000faa36dc018f63aa'
            '5552e8918462f6c3a4e1baef3c22b57d70c732766945ea0b39f63df7d7b8fca9646f1f9b28b0528fa586799842c949298fc97e1041875da0ca1aacff046f6c9b')

_system_libs=('ffmpeg'
              'flac'
              'harfbuzz-ng'
#              'icu'
              'libevent'
              'libjpeg'
              'libpng'
#              'libvpx'
              'libwebp'
#              'libxml'
#              'libxslt'
              're2'
              'snappy'
              'yasm'
              'zlib'
             )

prepare() {
  cd "${srcdir}"/electron

  patch -Np1 -i "${srcdir}"/default_app-icon.patch  # Icon from .desktop file
  patch -Np1 -i "${srcdir}"/gtk3-menu-bar.patch
  patch -Np1 -i "${srcdir}"/gtk3-message-box.patch
  patch -Np1 -i "${srcdir}"/gtk3-warnings.patch
  patch -Np1 -i "${srcdir}"/use-system-libraries-in-node.patch
  patch -Np1 -i "${srcdir}"/use-system-ninja.patch
  patch -Np1 -i "${srcdir}"/use-system-ffmpeg.patch
  patch -Np1 -i "${srcdir}"/dont-update-submodules.patch
  patch -Np1 -i "${srcdir}"/dont-use-sysroot.patch
  patch -Np1 -i "${srcdir}"/dont-bootstrap-libchromiumcontent.patch
  patch -Np1 -i "${srcdir}"/no-whole-archive.patch

  # Add extra libraries for unbundling
  sed -e "s/'-lexpat',/'-lexpat', '<\!@(pkg-config --libs-only-l libavcodec libavformat libavutil libevent flac harfbuzz-icu jsoncpp minizip libpng libpulse libwebpdemux)', '-ljpeg', '-lre2', '-lsnappy', '-latomic',/" \
      -e 's/gtk+-2\.0/gtk+-3.0/' \
      -i brightray/brightray.gyp

  mkdir -p "${srcdir}"/python2-path
  ln -sf /usr/bin/python2 "${srcdir}/python2-path/python"

  for m in boto breakpad gyp libchromiumcontent native_mate node pdf_viewer requests; do
    git submodule init vendor/${m}
    git config submodule.vendor/${m}.url "${srcdir}/${m}"
  done
  git submodule update

  cd "${srcdir}"/electron/vendor/pdf_viewer
  git submodule init vendor/grit
  git config submodule.vendor/grit.url "${srcdir}/grit"
  git submodule update

  cd "${srcdir}"/electron/vendor/breakpad
  git submodule init src
  git config submodule.src.url "${srcdir}"/google-breakpad
  git submodule update
  patch -Np1 -i "${srcdir}"/breakpad-glibc2.26.patch

  cd "${srcdir}"/electron/vendor/gyp
  # Remove a useless $ORIGIN/lib/ rpath from the electron binary
  patch -Np1 -i "${srcdir}"/gyp-no-rpath.patch

  cd "${srcdir}"/electron/vendor/libchromiumcontent
  patch -Np1 -i "${srcdir}"/libchromiumcontent-no-depot_tools.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-settings.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-sort-filenames.patch  # deterministic build
  patch -Np1 -i "${srcdir}"/libchromiumcontent-use-system-tools.patch
  patch -Np1 -i "${srcdir}"/libchromiumcontent-static-library-only.patch
  rm patches/third_party/ffmpeg/001-build_gn.patch  # Use system ffmpeg
  echo 'Extracting chromium source...'
  tar -xJf "${srcdir}"/chromium-${_chromiumver}.tar.xz
  mv chromium-${_chromiumver} src
  cd src
  patch -Np1 -i "${srcdir}"/chromium-dmabuf.patch
  patch -Np1 -i "${srcdir}"/chromium-include-functional.patch
  patch -Np1 -i "${srcdir}"/chromium-use-system-ffmpeg.patch
  patch -Np1 -i "${srcdir}"/chromium-use-system-minizip.patch
  patch -Np1 -i "${srcdir}"/chromium-use-system-re2.patch

  for lib in "${_system_libs[@]}" libjpeg_turbo; do
      find -type f -path "*third_party/${lib}/*" \
          \! -path "*third_party/${lib}/chromium/*" \
          \! -path "*third_party/${lib}/google/*" \
          \! -path "*base/third_party/icu/*" \
          \! -path "*base/third_party/libevent/*" \
          \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
          -delete
  done
  python2 build/linux/unbundle/replace_gn_files.py --system-libraries "${_system_libs[@]}"

  # Create sysmlink to system Node.js
  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin

  # Fixes from the chromium package
  mv "${srcdir}/chromium-freetype2" third_party/freetype/src
}

build() {
  export PATH="${srcdir}/python2-path:${PATH}"

  # Build GN
  cd "${srcdir}/electron/vendor/libchromiumcontent/src"
  gn_flags=(
    'clang_base_path="/usr"'
    'clang_use_chrome_plugins=false'
    'treat_warnings_as_errors=false'
    'use_sysroot=false'
  )
  python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${gn_flags[*]}"
  # libevent not needed anymore
  find -type f -path "*base/third_party/libevent/*" \
    \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
    -delete

  cd "${srcdir}"/electron
  LDFLAGS="${LDFLAGS} -Wl,-z,noexecstack"
  script/bootstrap.py --verbose \
                      --clang_dir=/usr \
                      --build_release_libcc
  script/build.py -c Release
}

package() {
  cd "${srcdir}"/electron

  _cc="${srcdir}"/electron/vendor/libchromiumcontent/dist/main

  install -d -m755 "${pkgdir}"/usr/share/licenses/electron
  install -m644 LICENSE "${_cc}"/LICENSES.chromium.html \
          "${pkgdir}"/usr/share/licenses/electron
  for lib in native_mate node; do
    install -m644 vendor/${lib}/LICENSE \
            "${pkgdir}"/usr/share/licenses/electron/LICENSE-${lib}
  done
  install -m644 vendor/libchromiumcontent/src/LICENSE \
          "${pkgdir}"/usr/share/licenses/electron/LICENSE-chromium

  cd out/R
  install -d -m755 "${pkgdir}"/usr/lib/electron
  install -m644 blink_image_resources_200_percent.pak \
          content_resources_200_percent.pak content_shell.pak icudtl.dat \
          natives_blob.bin \
          pdf_viewer_resources.pak \
          snapshot_blob.bin \
          ui_resources_200_percent.pak \
          views_resources_200_percent.pak \
          "${pkgdir}"/usr/lib/electron
  install -m755 electron "${pkgdir}"/usr/lib/electron
  install -dm755 "${pkgdir}"/usr/bin
  ln -s ../lib/electron/electron "${pkgdir}"/usr/bin
  # namcap warning: Referenced library 'libnode.so' is an uninstalled dependency
  # Fixable by moving libnode.so to /usr/lib
  install -m644 libnode.so "${pkgdir}"/usr/lib/electron
  cp -r locales resources "${pkgdir}"/usr/lib/electron
  cd ../..

  echo -n "v${pkgver}" > "${pkgdir}"/usr/lib/electron/version

  # Install .desktop and icon file
  install -Dm644 "${srcdir}"/electron.desktop \
          "${pkgdir}"/usr/share/applications/electron.desktop
  install -Dm644 default_app/icon.png \
          "${pkgdir}"/usr/share/pixmaps/electron.png  # hicolor has no 1024x1024

  # Install Node headers
  _headers_dest="${pkgdir}/usr/lib/electron/node"
  install -d -m755 "${_headers_dest}"
  cd "${srcdir}"/electron/vendor/node
  find src deps/http_parser deps/zlib deps/uv deps/npm \
    -name "*.gypi" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \; \
    -or -name "*.h" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \;
  install -m644 {common,config}.gypi "${_headers_dest}"
  cd "${_cc}"/src
  find v8 -name "*.h" \
    -exec install -D -m644 '{}' "${_headers_dest}/deps/{}" \;
  # echo '9' > "${_headers_dest}/installVersion"
}
