--- a/script/build
+++ b/script/build
@@ -15,7 +15,7 @@ VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
 TARGETS = ['chromiumcontent_all']
 COMPONENTS = ['static_library', 'shared_library', 'ffmpeg']
 
-NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja')
+NINJA = 'ninja'
 if sys.platform == 'win32':
   NINJA = '{0}.exe'.format(NINJA)
 elif IS_MIPS64EL_HOST:
--- a/script/create-dist
+++ b/script/create-dist
@@ -31,7 +31,7 @@ import ninja_syntax
 MAIN_DIR = os.path.join(DIST_DIR, 'main')
 DIST_SRC_DIR = os.path.join(MAIN_DIR, 'src')
 
-NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja')
+NINJA = 'ninja'
 if sys.platform == 'win32':
   NINJA = '{0}.exe'.format(NINJA)
 elif IS_MIPS64EL_HOST:
--- a/script/update
+++ b/script/update
@@ -69,17 +69,16 @@ def main():
   if target_arch == 'mips64el' and IS_MIPS64EL_HOST:
     os.system('sh script/mips64el/runhooks-mips64el')
 
-  if sys.platform == 'linux2':
-    install_sysroot(target_arch)
-  elif sys.platform in ['win32', 'cygwin']:
-    update_toolchain_json()
+  # if sys.platform == 'linux2':
+  #   install_sysroot(target_arch)
+  # elif sys.platform in ['win32', 'cygwin']:
+  #   update_toolchain_json()
 
   if target_arch == 'arm64':
     install_aarch64_bintools()
 
   return (apply_patches(args.skip_patches, target_arch) or
           copy_chromiumcontent_files() or
-          update_clang() or
           setup_mips64el_toolchain(target_arch) or
           run_gn(target_arch, args.defines))
 
@@ -276,7 +275,7 @@ def setup_mips64el_toolchain(target_arch):
 
 
 def run_gn(target_arch, defines):
-  gn = os.path.join(VENDOR_DIR, 'depot_tools', 'gn')
+  gn = os.path.join(SRC_DIR, 'out', 'Release', 'gn')
   if sys.platform in ['win32', 'cygwin']:
     gn += '.bat'
 
